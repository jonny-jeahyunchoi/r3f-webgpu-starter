/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from "react"; // React import 추가
import { useGLTF } from "@react-three/drei";
import { FrontSide, Material, Mesh, Color, Texture } from "three"; // 필요한 Three.js 타입들 추가
import { GLTF } from 'three-stdlib';
import { ThreeElements } from '@react-three/fiber'; // ThreeElements import 추가

// Material 타입 확장 (필요한 속성들 명시)
interface ExtendedMaterial extends Material {
  emissiveIntensity?: number;
  color?: Color;
  roughness?: number;
  normalMap?: Texture | null;
  metalness?: number;
  metalnessMap?: Texture | null;
  // side는 Material에 이미 존재
}

interface GLTFResult extends GLTF {
  nodes: {
    WallPanel21_VenatorV3_WallPanels_0001: Mesh;
    WallPanel21_VenatorV3_WallPanels_0001_1: Mesh;
    WallPanel21_VenatorV3_WallPanels_0001_2: Mesh;
    WallPanel21_VenatorV3_WallPanels_0001_3: Mesh;
  };
  materials: {
    VenatorV3_SmallDoor_WallLight: ExtendedMaterial;
    Venator_Floor: ExtendedMaterial;
    VenatorV3_WallPanels: ExtendedMaterial;
    VenatorV3_LargeDoor: ExtendedMaterial;
  };
}

// @react-three/fiber의 ThreeElements 유틸리티 타입을 사용하여 Props 정의
type HallProps = ThreeElements['group'] & {
  // 추가적인 props
};

export const Hall: React.FC<HallProps> = (props) => {
  const { nodes, materials } = useGLTF("/hall-transformed.glb") as unknown as GLTFResult; // 타입 단언을 unknown을 거치도록 수정

  // Material 속성 설정 (타입 안정성을 위해 null 체크 또는 단언 사용)
  if (materials.VenatorV3_SmallDoor_WallLight) materials.VenatorV3_SmallDoor_WallLight.emissiveIntensity = 2.6;
  if (materials.Venator_Floor) {
    if (!materials.Venator_Floor.color) materials.Venator_Floor.color = new Color();
    materials.Venator_Floor.color.set("black");
    materials.Venator_Floor.roughness = 0.95;
    materials.Venator_Floor.normalMap = null;
    materials.Venator_Floor.metalness = 1;
    materials.Venator_Floor.metalnessMap = null;
  }
  if (materials.VenatorV3_WallPanels) {
    if (!materials.VenatorV3_WallPanels.color) materials.VenatorV3_WallPanels.color = new Color();
    materials.VenatorV3_WallPanels.color.set("grey");
    materials.VenatorV3_WallPanels.roughness = 0.8;
    materials.VenatorV3_WallPanels.metalness = 0.5;
    materials.VenatorV3_WallPanels.side = FrontSide;
  }
  if (materials.VenatorV3_LargeDoor) materials.VenatorV3_LargeDoor.side = FrontSide;
  if (materials.VenatorV3_SmallDoor_WallLight) materials.VenatorV3_SmallDoor_WallLight.side = FrontSide;

  return (
    /* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */
    <group {...props} dispose={null}>
      {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.012}>
        {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
        <group rotation={[Math.PI / 2, 0, 0]}>
          {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
          <group position={[-1448.93, -5.342, -159.366]} scale={6.463}>
            {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
            <mesh
              receiveShadow
              geometry={nodes.WallPanel21_VenatorV3_WallPanels_0001.geometry}
              material={materials.VenatorV3_WallPanels}
            />
            {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
            <mesh
              receiveShadow
              geometry={nodes.WallPanel21_VenatorV3_WallPanels_0001_1.geometry}
              material={materials.VenatorV3_LargeDoor}
            />
            {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
            <mesh
              receiveShadow
              geometry={nodes.WallPanel21_VenatorV3_WallPanels_0001_2.geometry}
              material={materials.Venator_Floor}
            >
              {/* <meshPhysicalMaterial
                color="black"
                metalness={0.8}
                roughness={0.7}
              /> */}
            </mesh>
            {/* @ts-ignore JSX Intrinsic Element 오류는 추후 해결 */}
            <mesh
              receiveShadow
              geometry={nodes.WallPanel21_VenatorV3_WallPanels_0001_3.geometry}
              material={materials.VenatorV3_SmallDoor_WallLight}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/hall-transformed.glb"); 