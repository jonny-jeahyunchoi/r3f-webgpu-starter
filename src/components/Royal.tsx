/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 naboo_royal_starship.glb --transform --simplify
Author: hobbit84 (https://sketchfab.com/hobbit84)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/naboo-royal-starship-j-type-327-nubian-f631077977754b5591298ecfa201380b
Title: Naboo Royal Starship (J-type 327 Nubian)
*/

import React from "react";
import { Float, useGLTF } from "@react-three/drei";
import { AdditiveBlending, DoubleSide, Material, Mesh } from "three/webgpu";
import { GLTF } from 'three-stdlib';
import { ThreeElements, type ThreeToJSXElements, extend } from '@react-three/fiber';
import * as THREE from 'three/webgpu';
import { useJetEngineMaterial } from "./JetEngineMaterial";
import { MeshBasicNodeMaterial, MeshMatcapNodeMaterial, MeshStandardNodeMaterial } from 'three/webgpu';

declare module '@react-three/fiber' {
  interface ThreeElements extends ThreeToJSXElements<typeof THREE> {}
}
extend({ MeshMatcapNodeMaterial, MeshBasicNodeMaterial, MeshStandardNodeMaterial });

interface GLTFResult extends GLTF {
  nodes: {
    Object_2: Mesh;
    Object_3: Mesh;
    Object_4: Mesh;
    Object_5: Mesh;
    Object_6: Mesh;
  };
  materials: {
    ['Material.002']: Material;
    ['aiwindow.002']: Material;
    ['blinn1.002']: Material & { roughness: number; metalness: number; roughnessMap: any };
  };
}

type RoyalNabooProps = ThreeElements['group'] & {
  // 여기에 RoyalNaboo 컴포넌트만의 추가적인 props를 정의할 수 있습니다.
};

export default function RoyalNaboo(props: RoyalNabooProps) {
  const { nodes, materials } = useGLTF("/naboo_royal_starship-transformed.glb") as unknown as GLTFResult;
  const { key, colorNode } = useJetEngineMaterial();

  const blinnMaterial = materials["blinn1.002"];
  if (blinnMaterial) {
    blinnMaterial.roughness = 0.15;
    blinnMaterial.metalness = 1;
    blinnMaterial.roughnessMap = null;
  }

  return (
    <Float speed={2} floatIntensity={0.2} rotationIntensity={0.3}>
      <group {...props} dispose={null}>
        <group position={[-0.01, 0, 6.5]} rotation={[-Math.PI / 2, 0, Math.PI]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_2.geometry}
            material={materials["Material.002"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_3.geometry}
            material={materials["aiwindow.002"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_4.geometry}
            material={blinnMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_5.geometry}
            material={blinnMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_6.geometry}
            material={blinnMaterial}
          />
          <mesh position={[-1.48, -4.1, -0.36]}>
            <cylinderGeometry args={[0.2, 0.01, 2.9, 16, 8, true]} />
            <meshStandardNodeMaterial
              key={key}
              colorNode={colorNode}
              transparent
              blending={AdditiveBlending}
              side={DoubleSide}
              emissiveNode={colorNode}
            />
          </mesh>
          <mesh position={[1.48, -4.1, -0.36]}>
            <cylinderGeometry args={[0.2, 0.01, 2.9, 16, 8, true]} />
            <meshStandardNodeMaterial
              key={key}
              colorNode={colorNode}
              transparent
              blending={AdditiveBlending}
              side={DoubleSide}
              emissiveNode={colorNode}
            />
          </mesh>
          <mesh
            rotation={[Math.PI / 2, 0, 0]}
            position={[1.51, -2.68, -0.37]}
            renderOrder={-1}
          >
            <torusGeometry args={[0.2, 0.03, 24, 24]} />
            <meshStandardNodeMaterial
              color="red"
              transparent
              emissive="cyan"
              emissiveIntensity={10}
            />
          </mesh>
          <mesh
            rotation={[Math.PI / 2, 0, 0]}
            position={[-1.5, -2.68, -0.36]}
            renderOrder={-1}
          >
            <torusGeometry args={[0.2, 0.03, 24, 24]} />
            <meshStandardNodeMaterial
              color="cyan"
              transparent
              emissive="cyan"
              emissiveIntensity={10}
            />
          </mesh>
        </group>
      </group>
    </Float>
  );
}

useGLTF.preload("/naboo_royal_starship-transformed.glb"); 