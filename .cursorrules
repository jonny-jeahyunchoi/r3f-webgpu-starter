# R3F WebGPU + Vite + TypeScript 스타터 프로젝트 규칙

## 프로젝트 구조 (Vite 기반)
- `index.html`: [프로젝트 루트의 진입 HTML 파일](mdc:index.html)
- `vite.config.ts`: [Vite 설정 파일](mdc:vite.config.ts)
- `tsconfig.json`: [TypeScript 설정 파일](mdc:tsconfig.json)
- `public/`: 정적 에셋 폴더 (빌드 시 루트에 복사됨)
  - `favicon.ico`: [예시 파비콘](mdc:public/favicon.ico)
- `src/`: 소스 코드 디렉토리
  - `index.tsx`: [React 애플리케이션 진입점 (main.tsx일 수도 있음)](mdc:src/index.tsx)
  - `App.tsx`: [메인 애플리케이션 컴포넌트](mdc:src/App.tsx)
  - `components/`: [React 컴포넌트들](mdc:src/components)
  - `styles.css`: [전역 스타일 및 Tailwind CSS import 지점](mdc:src/styles.css)
  - `three.d.ts`: [Three.js 관련 전역 타입 확장 (특히 R3F JSX 요소)](mdc:src/three.d.ts)
- `tailwind.config.js` (생성 예정): [Tailwind CSS 설정 파일]()
- `postcss.config.js` (생성 예정): [PostCSS 설정 파일 (Tailwind CSS용)]()

## 주요 기술 스택 (업데이트됨)
- **React:** ^19.0.0 (UI 라이브러리)
- **Three.js:** ^0.175.0 (3D 그래픽스 라이브러리)
- **React Three Fiber (R3F):** ^9.1.0 (Three.js용 React 렌더러)
- **Drei:** ^10.0.5 (R3F용 유용한 헬퍼 및 추상화)
- **Vite:** ^6.2.0 (차세대 프론트엔드 빌드 도구)
- **TypeScript:** ~5.7.2 (JavaScript에 타입을 추가한 언어)
- **Tailwind CSS:** ^4.0.17 (유틸리티 우선 CSS 프레임워크)
- **three-stdlib:** (Three.js JSM 애드온 모음, 필요시 적극 사용 권장)

## 코드 컨벤션 및 타입스크립트 규칙
- **파일 명명:**
  - React 컴포넌트: `PascalCase.tsx` (예: `MyComponent.tsx`)
  - 일반 TypeScript 파일/모듈: `camelCase.ts` 또는 `PascalCase.ts` (예: `utils.ts`, `GraphicsManager.ts`)
- **타입 정의:**
  - 모든 Props, State, 함수 반환 값 및 주요 변수에 명시적인 타입 사용을 권장.
  - `any` 타입 사용은 최대한 지양. 불가피할 경우 주석으로 사유 명시.
  - 복잡한 객체나 API 응답에 대해서는 `interface` 또는 `type`을 사용하여 명확한 타입 구조 정의.
- **Import 경로:**
  - `tsconfig.json`의 `baseUrl` (".") 및 `paths` (현재 `"three/examples/jsm/*": ["./node_modules/@types/three/examples/jsm/*"]` 설정)를 활용한 절대 경로 또는 상대 경로 사용.
  - **Three.js JSM 애드온 모듈 및 TSL 기능 Import 시 주의:**
    - 현재 `three/examples/jsm/...`, `three/tsl`, `three/webgpu` 등 다양한 경로에서 import 시도 중이며, 타입 정의가 불안정할 수 있음.
    - `three-stdlib` 패키지 사용을 우선적으로 고려하여 안정적인 import 경로 확보 권장.
    - TSL(Node Material) 기능 사용 시, 함수와 노드 클래스/타입의 정확한 import 경로 확인 필수 (현재 `three/tsl` 또는 `three` 코어 모듈 직접 import 시도 중).
- **React Three Fiber (R3F) JSX 요소:**
  - `<group>`, `<mesh>`, `<meshStandardMaterial>` 등 R3F에서 사용하는 Three.js 객체 기반 JSX 요소들은 TypeScript에서 타입 에러를 발생시킬 수 있음.
  - 이를 해결하기 위해 `src/three.d.ts` 파일에 `import '@react-three/fiber';` 를 포함하여 JSX 네임스페이스를 전역적으로 확장해야 함.
  - 특정 커스텀 머티리얼이나 노드 재질 (예: `<meshStandardNodeMaterial>`) 사용 시, R3F의 `extend` 함수를 사용하여 해당 클래스를 R3F 요소로 등록하고, 필요시 `ThreeElements` 타입을 확장해야 할 수 있음.
- **WebGPU 관련 코드:**
  - `WebGPURenderer` 사용 시 타입 정의 및 초기화 방식에 주의. (현재 `ManciniCanvas.tsx`에서 시도 중)
  - WebGPU 지원 여부 및 폴백 로직 고려.
- **ESLint/Prettier:** 프로젝트에 설정된 ESLint 및 Prettier 규칙을 준수하여 코드 일관성 유지.

## 주의사항 (업데이트됨)
- **타입 정의의 불안정성:** 현재 사용 중인 Three.js 버전(^0.175.0) 및 `@types/three` 타입 정의에서 JSM 애드온, TSL, WebGPU 관련 기능들의 타입 정의가 불안정하거나 경로 문제가 있을 수 있음. 지속적인 확인 및 커뮤니티 동향 파악 필요.
- **Vite 환경:** 기존 CRA 프로젝트에서 마이그레이션 되었으므로, Vite의 빌드 및 개발 환경 특성을 이해해야 함.
- **React 19:** 최신 React 버전의 변경사항 (예: JSX Transform)에 유의.

## 학습 포인트 (확장)
- R3F 및 Drei를 사용한 선언적 3D 프로그래밍.
- Vite 기반의 모던 프론트엔드 개발 환경 구성.
- TypeScript를 활용한 타입 안정적인 3D 애플리케이션 개발.
- Three.js의 JSM 모듈 및 TSL(Node Material) 시스템의 이해 및 타입 문제 해결 전략.
- WebGPU 렌더링 파이프라인 기초 및 R3F에서의 통합 시도.

## 파일 설명
- `App.tsx`: [메인 3D 씬 설정 및 렌더링](mdc:src/App.tsx)
- `components/`: [재사용 가능한 3D 컴포넌트들](mdc:src/components)
- `styles.css`: [기본 스타일링 및 레이아웃](mdc:src/styles.css) 